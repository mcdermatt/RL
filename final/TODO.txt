
TODO------------------------------------------------

Visualization

	visualize comparison of two arms?
		superimpose second ghost arm?
			make both arms transparent??

	clean up plot of joint angles
		stretch to width of screen?

	ground plane?

	generate obj files of v9 robot
		Export two versions of each link- one with normal texture and one transparent


Performance
	Don't change up x0 and reevaluate solution vector for each next step if external loads on system don't change 
		(evaluate next points as y = odeint(...))  

		if you re-evaluate at every point you are literally just doing numerical integration and performace will be horrible

		provide option to take results as one vector or to re-evaluate input at each timestep

		Figure out why statePredictor() is slower when called from MPL_viz_v3.py
			MUCH faster when using it in termial

Dynamics
	Should I compensate for gravity or not? 
		It's kinda the perfect external load

	if I don't, do I not have to cancel dynamics? Just flopping the arm around should leave enough of a signature of friction parameters?

		cancelling dynamics could potentailly make things more difficult (when estimating parameters)	

Validation:
	
	Determine value function
		how long to wait between t = 0 and when endoint error is calculated?
			instantly stop considering points for error after robot reaches impossibe to reach space

	Start with just simulated arm

	Get lengths of each arm segment from CAD





DONE-------------------------------------------------

Visualization
	test old visualization model with newly generated path
		works with arm roboticArm/humanPoseEstimation/v8rendertest3

	make "viz" class - much cleaner than old code

	figure out how to use @window.event within class

	make visualization class
		armV8RenderTestV3 works but is VERY crude

	display chart of trajecctories in background

	move around scene with mouse

	make accurate real time simulation

Use heaviside func to model stick-slip friction
	-wrote heaviside func into EOM solver script, scipy ODEint is having trouble handling piecewise funcs

	-might(?) try using the Pade Approximant

	-look into alternate forms of sympy codegen - check out Theano

	-> DiracDelta should be able to do the same thing as Heaviside
		integral(DiracDelta) = Heaviside

looks like scipy-integrate does not play nicely with analytical integration
	-going to try using the sympy integration tools - need to learn them first

	-check out scipy.integrate.solve_ivp
		-have to set up variable like a function(?)

	good news! we're getting all the way to line 264 with the step func, so kanes method is working fine

		Try to reformulate friction using DiracDelta instead of Heaviside



Ice Box-----------------------------------------------
	
	Viz
		LABEL- Text on window


Lambdify vs NumPy / Scipy for performance


pretty_print() is not pretty enough


QUESTIONS----------------------------------------------------

	What to do when getting reward after each trial - no discounting
		should I redesign so that I pass through multiple points/ longer time so that 
		more regions can be accounted for in a single trial
			This would only hurt me, right?